<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;zh-CN&quot;&gt;&#10;&lt;head&gt;&#10;&lt;meta charset=&quot;UTF-8&quot;/&gt;&#10;&lt;title&gt;HTTP Proxy 工具&lt;/title&gt;&#10;&lt;meta content=&quot;width=device-width, initial-scale=1.0&quot; name=&quot;viewport&quot;/&gt;&#10;&lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;https://unpkg.com/@babel/standalone&quot;&gt;&lt;/script&gt;&#10;&lt;!-- 必须导入React和ReactDOM --&gt;&#10;&lt;script data-type=&quot;module&quot; type=&quot;text/babel&quot;&gt;&#10;&#9;import {createRoot} from 'https://esm.sh/react-dom@19/client';&#10;&#9;import React, {useCallback, useEffect, useState} from 'https://esm.sh/react@19';&#10;&#10;&#9;function App(){&#10;&#9;&#9;const [method, setMethod] = useState('GET');&#10;&#9;&#9;const [url, setUrl] = useState('https://httpbin.org/get');&#10;&#9;&#9;const [headers, setHeaders] = useState([]);&#10;&#9;&#9;const [bodyType, setBodyType] = useState('none');&#10;&#9;&#9;const [jsonBody, setJsonBody] = useState('');&#10;&#9;&#9;const [formBody, setFormBody] = useState([]);&#10;&#9;&#9;const [multipartBody, setMultipartBody] = useState([]);&#10;&#9;&#9;const [binaryFile, setBinaryFile] = useState(null);&#10;&#9;&#9;const [response, setResponse] = useState('');&#10;&#9;&#9;const [isLoading, setIsLoading] = useState(false);&#10;&#9;&#9;const [manualRedirect, setManualRedirect] = useState(false);&#10;&#9;&#9;const [useProxy, setUseProxy] = useState(true); // 默认为 true，使用代理&#10;&#10;&#9;&#9;const exampleRequests = [&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'GET 示例 (httpbin.org/get)',&#10;&#9;&#9;&#9;&#9;method:'GET',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/get',&#10;&#9;&#9;&#9;&#9;headers:[{name:'Accept', value:'application/json'}],&#10;&#9;&#9;&#9;&#9;bodyType:'none', jsonBody:'', formBody:[], multipartBody:[], binaryFile:null,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'JSON POST 示例 (httpbin.org/post)',&#10;&#9;&#9;&#9;&#9;method:'POST',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/post',&#10;&#9;&#9;&#9;&#9;headers:[{name:'X-Custom-Header', value:'ReactProxyTest'}], // Content-Type will be auto-added&#10;&#9;&#9;&#9;&#9;bodyType:'json',&#10;&#9;&#9;&#9;&#9;jsonBody:JSON.stringify({query:'React Proxy', items:[{id:1, name:'item1'}, {id:2, name:'item2'}]}, null, 2),&#10;&#9;&#9;&#9;&#9;formBody:[], multipartBody:[], binaryFile:null,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'Form POST 示例 (httpbin.org/post)',&#10;&#9;&#9;&#9;&#9;method:'POST',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/post',&#10;&#9;&#9;&#9;&#9;headers:[], // Content-Type will be auto-added&#10;&#9;&#9;&#9;&#9;bodyType:'form',&#10;&#9;&#9;&#9;&#9;formBody:[{name:'username', value:'testUser'}, {name:'action', value:'submit'}],&#10;&#9;&#9;&#9;&#9;jsonBody:'', multipartBody:[], binaryFile:null,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'Multipart POST 示例 (httpbin.org/post)',&#10;&#9;&#9;&#9;&#9;method:'POST',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/post',&#10;&#9;&#9;&#9;&#9;headers:[], // Content-Type will be set by browser for FormData&#10;&#9;&#9;&#9;&#9;bodyType:'multipart',&#10;&#9;&#9;&#9;&#9;multipartBody:[&#10;&#9;&#9;&#9;&#9;&#9;{name:'textParam', value:'Hello Multipart', type:'text', file:null},&#10;&#9;&#9;&#9;&#9;&#9;{name:'fileParam', value:'', type:'file', file:null /* User will select a file */},&#10;&#9;&#9;&#9;&#9;],&#10;&#9;&#9;&#9;&#9;jsonBody:'', formBody:[], binaryFile:null,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'Binary File POST 示例 (httpbin.org/post)',&#10;&#9;&#9;&#9;&#9;method:'POST',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/post',&#10;&#9;&#9;&#9;&#9;headers:[], // Content-Type will be auto-detected from file or set to octet-stream&#10;&#9;&#9;&#9;&#9;bodyType:'binary',&#10;&#9;&#9;&#9;&#9;binaryFile:null, /* User will select a file */&#10;&#9;&#9;&#9;&#9;jsonBody:'', formBody:[], multipartBody:[],&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'手动重定向 GET 示例 (httpbin.org/redirect-to)',&#10;&#9;&#9;&#9;&#9;method:'GET',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/redirect-to?url=https://example.com',&#10;&#9;&#9;&#9;&#9;headers:[],&#10;&#9;&#9;&#9;&#9;bodyType:'none',&#10;&#9;&#9;&#9;&#9;jsonBody:'', formBody:[], multipartBody:[], binaryFile:null,&#10;&#9;&#9;&#9;&#9;manualRedirect:true, // 新增&#10;&#9;&#9;&#9;},&#10;&#9;&#9;];&#10;&#10;&#9;&#9;// 生成唯一 ID&#10;&#9;&#9;function genId(){&#10;&#9;&#9;&#9;return Date.now()+Math.random()*1000;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 加载示例请求配置&#10;&#9;&#9;const loadExample = useCallback((example)=&gt;{&#10;&#9;&#9;&#9;const {&#10;&#9;&#9;&#9;&#9;method = 'GET', url = '', headers = [], bodyType = 'none',&#10;&#9;&#9;&#9;&#9;jsonBody = '', formBody = [], multipartBody = [], manualRedirect = false,&#10;&#9;&#9;&#9;} = example;&#10;&#9;&#9;&#9;setMethod(method);&#10;&#9;&#9;&#9;setUrl(url);&#10;&#9;&#9;&#9;setHeaders(headers.map(h=&gt;({...h, id:genId()})));&#10;&#9;&#9;&#9;setBodyType(bodyType);&#10;&#9;&#9;&#9;setJsonBody(jsonBody);&#10;&#9;&#9;&#9;setFormBody(formBody.map(f=&gt;({...f, id:genId()})));&#10;&#9;&#9;&#9;setMultipartBody(multipartBody.map(m=&gt;({...m, id:genId(), file:null})));&#10;&#9;&#9;&#9;setBinaryFile(null);&#10;&#9;&#9;&#9;setManualRedirect(manualRedirect);&#10;&#9;&#9;&#9;setResponse('示例已加载。配置完成后，请点击“发送请求”。');&#10;&#9;&#9;}, []);&#10;&#10;&#9;&#9;// 启动时，加载第一个示例&#10;&#9;&#9;useEffect(()=&gt;{&#10;&#9;&#9;&#9;const defaultExample = exampleRequests[0];&#10;&#9;&#9;&#9;if (defaultExample){&#10;&#9;&#9;&#9;&#9;loadExample(defaultExample);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}, []);&#10;&#10;&#9;&#9;const addHeader = ()=&gt;setHeaders([...headers, {id:genId(), name:'', value:''}]);&#10;&#9;&#9;const removeHeader = (id)=&gt;setHeaders(headers.filter(h=&gt;h.id!==id));&#10;&#9;&#9;const updateHeader = (id, field, value)=&gt;{&#10;&#9;&#9;&#9;setHeaders(headers.map(h=&gt;h.id===id? {...h, [field]:value}: h));&#10;&#9;&#9;};&#10;&#10;&#9;&#9;const addFormParam = ()=&gt;setFormBody([...formBody, {id:genId(), name:'', value:''}]);&#10;&#9;&#9;const removeFormParam = (id)=&gt;setFormBody(formBody.filter(p=&gt;p.id!==id));&#10;&#9;&#9;const updateFormParam = (id, field, value)=&gt;{&#10;&#9;&#9;&#9;setFormBody(formBody.map(p=&gt;p.id===id? {...p, [field]:value}: p));&#10;&#9;&#9;};&#10;&#10;&#9;&#9;const addMultipartParam = ()=&gt;setMultipartBody(&#10;&#9;&#9;&#9;&#9;[...multipartBody, {id:genId(), name:'', value:'', type:'text', file:null}]);&#10;&#9;&#9;const removeMultipartParam = (id)=&gt;setMultipartBody(multipartBody.filter(p=&gt;p.id!==id));&#10;&#9;&#9;const updateMultipartParam = (id, field, value)=&gt;{&#10;&#9;&#9;&#9;setMultipartBody(multipartBody.map(p=&gt;p.id===id? {...p, [field]:value}: p));&#10;&#9;&#9;};&#10;&#9;&#9;const handleMultipartFileTypeChange = (id, type)=&gt;{&#10;&#9;&#9;&#9;setMultipartBody(multipartBody.map(p=&gt;p.id===id? {&#10;&#9;&#9;&#9;&#9;...p, type:type, value:type==='file'? (p.file? p.file.name: ''): p.value, file:type==='text'? null: p.file,&#10;&#9;&#9;&#9;}: p));&#10;&#9;&#9;};&#10;&#9;&#9;const handleMultipartFileChange = (id, file)=&gt;{&#10;&#9;&#9;&#9;setMultipartBody(multipartBody.map(p=&gt;p.id===id? {...p, file:file, value:file? file.name: ''}: p));&#10;&#9;&#9;};&#10;&#10;&#9;&#9;&#9;const handleSendRequest = async()=&gt;{&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 构造请求头和请求体，这部分对于代理和直接请求是共用的&#10;&#9;&#9;&#9;const requestHeaders = new Headers();&#10;&#9;&#9;&#9;let hasUserContentType = false;&#10;&#9;&#9;&#9;headers.forEach(h=&gt;{&#10;&#9;&#9;&#9;&#9;if (h.name &amp;&amp; h.value){&#10;&#9;&#9;&#9;&#9;&#9;requestHeaders.set(h.name, h.value);&#10;&#9;&#9;&#9;&#9;&#9;if (h.name.toLowerCase()==='content-type'){&#10;&#9;&#9;&#9;&#9;&#9;&#9;hasUserContentType = true;&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;});&#10;&#10;&#9;&#9;&#9;let bodyToSend = null;&#10;&#9;&#9;&#9;let autoContentType = null;&#10;&#10;&#9;&#9;&#9;if (method!=='GET' &amp;&amp; method!=='HEAD'){&#10;&#9;&#9;&#9;&#9;switch (bodyType){&#10;&#9;&#9;&#9;&#9;&#9;case 'json':&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = jsonBody;&#10;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = 'application/json; charset=utf-8';&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'form':&#10;&#9;&#9;&#9;&#9;&#9;&#9;const params = new URLSearchParams();&#10;&#9;&#9;&#9;&#9;&#9;&#9;formBody.forEach(p=&gt;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (p.name){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;params.append(p.name, p.value);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = params;&#10;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = 'application/x-www-form-urlencoded; charset=utf-8';&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'multipart':&#10;&#9;&#9;&#9;&#9;&#9;&#9;const formData = new FormData();&#10;&#9;&#9;&#9;&#9;&#9;&#9;multipartBody.forEach(p=&gt;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (p.name){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (p.type==='file' &amp;&amp; p.file){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;formData.append(p.name, p.file, p.file.name);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;} else if (p.type==='text'){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;formData.append(p.name, p.value);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = formData;&#10;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = null; // 对于 FormData，浏览器会自动设置 Content-Type&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'binary':&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = binaryFile;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (binaryFile){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = binaryFile.type || 'application/octet-stream';&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;default:&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = null;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if (autoContentType &amp;&amp; !hasUserContentType){&#10;&#9;&#9;&#9;&#9;requestHeaders.set('Content-Type', autoContentType);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;// 如果是 FormData，浏览器需要自己设置 Content-Type 和 boundary，因此删除用户设置的&#10;&#9;&#9;&#9;if (bodyToSend instanceof FormData &amp;&amp; hasUserContentType){&#10;&#9;&#9;&#9;&#9;const userContentTypeHeader = headers.find(h=&gt;h.name.toLowerCase()==='content-type');&#10;&#9;&#9;&#9;&#9;if (userContentTypeHeader){&#10;&#9;&#9;&#9;&#9;&#9;requestHeaders.delete(userContentTypeHeader.name);&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;let fetchUrl;&#10;&#9;&#9;&#9;&#9;let fetchOptions;&#10;&#10;&#9;&#9;&#9;&#9;if (useProxy){&#10;&#9;&#9;&#9;&#9;&#9;// 使用代理服务器的逻辑&#10;&#9;&#9;&#9;&#9;&#9;const proxyHeaders = new Headers();&#10;&#9;&#9;&#9;&#9;&#9;proxyHeaders.set('X-Url', url);&#10;&#9;&#9;&#9;&#9;&#9;proxyHeaders.set('X-Method', method);&#10;&#9;&#9;&#9;&#9;&#9;if (manualRedirect){&#10;&#9;&#9;&#9;&#9;&#9;&#9;proxyHeaders.set('X-Redirect', 'manual');&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;// 将用户定义的所有header传递给代理&#10;&#9;&#9;&#9;&#9;&#9;requestHeaders.forEach((value, key) =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;proxyHeaders.set(key, value);&#10;&#9;&#9;&#9;&#9;&#9;});&#10;&#10;&#9;&#9;&#9;&#9;&#9;fetchUrl = '/api/proxy';&#10;&#9;&#9;&#9;&#9;&#9;fetchOptions = {&#10;&#9;&#9;&#9;&#9;&#9;&#9;method: 'POST', // 对代理的请求总是POST&#10;&#9;&#9;&#9;&#9;&#9;&#9;headers: proxyHeaders,&#10;&#9;&#9;&#9;&#9;&#9;&#9;body: bodyToSend,&#10;&#9;&#9;&#9;&#9;&#9;&#9;redirect: 'manual', // 由代理处理重定向&#10;&#9;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;// 直接请求的逻辑&#10;&#9;&#9;&#9;&#9;&#9;fetchUrl = url;&#10;&#9;&#9;&#9;&#9;&#9;fetchOptions = {&#10;&#9;&#9;&#9;&#9;&#9;&#9;method: method,&#10;&#9;&#9;&#9;&#9;&#9;&#9;headers: requestHeaders,&#10;&#9;&#9;&#9;&#9;&#9;&#9;body: bodyToSend,&#10;&#9;&#9;&#9;&#9;&#9;&#9;redirect: manualRedirect ? 'manual' : 'follow',&#10;&#9;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;const res = await fetch(fetchUrl, fetchOptions);&#10;&#10;&#9;&#9;&#9;&#9;console.log('Response:', res);&#10;&#10;&#9;&#9;&#9;&#9;const responseHeaders = {};&#10;&#9;&#9;&#9;&#9;res.headers.forEach((value, key)=&gt;{&#10;&#9;&#9;&#9;&#9;&#9;responseHeaders[key] = value;&#10;&#9;&#9;&#9;&#9;});&#10;&#10;&#9;&#9;&#9;&#9;let responseBodyContent;&#10;&#9;&#9;&#9;&#9;const respContentType = res.headers.get('content-type');&#10;&#9;&#9;&#9;&#9;if (respContentType?.includes('application/json')){&#10;&#9;&#9;&#9;&#9;&#9;responseBodyContent = await res.json();&#10;&#9;&#9;&#9;&#9;} else if (respContentType?.includes('text/') || respContentType?.includes('application/xml')&#10;&#9;&#9;&#9;&#9;&#9;&#9;|| respContentType?.includes('application/javascript')){&#10;&#9;&#9;&#9;&#9;&#9;responseBodyContent = await res.text();&#10;&#9;&#9;&#9;&#9;} else if (res.body){&#10;&#9;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;&#9;const blob = await res.blob();&#10;&#9;&#9;&#9;&#9;&#9;&#9;responseBodyContent = `[Binary data: ${blob.size} bytes, Type: ${blob.type&#10;&#9;&#9;&#9;&#9;&#9;&#9;|| 'unknown'}. Cannot display content directly.]`;&#10;&#9;&#9;&#9;&#9;&#9;} catch (e){&#10;&#9;&#9;&#9;&#9;&#9;&#9;responseBodyContent = '[Response body exists but could not be read or displayed]';&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;responseBodyContent = '[No response body]';&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;const result = {&#10;&#9;&#9;&#9;&#9;&#9;status:res.status,&#10;&#9;&#9;&#9;&#9;&#9;statusText:res.statusText,&#10;&#9;&#9;&#9;&#9;&#9;headers:responseHeaders,&#10;&#9;&#9;&#9;&#9;&#9;body:responseBodyContent,&#10;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;&#9;setResponse(JSON.stringify(result, null, 2));&#10;&#10;&#9;&#9;&#9;} catch (err){&#10;&#9;&#9;&#9;&#9;console.error('Request failed:', err);&#10;&#9;&#9;&#9;&#9;let errorMessage = '请求失败:\n' + (err.message || String(err));&#10;&#9;&#9;&#9;&#9;if (!useProxy &amp;&amp; err.name === 'TypeError' &amp;&amp; err.message.includes('Failed to fetch')) {&#10;&#9;&#9;&#9;&#9;&#9;errorMessage += '\n\n提示：当不使用代理直接请求时，可能会遇到 CORS (跨域资源共享) 策略问题。请确保目标服务器允许来自此页面的跨域请求。';&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;setResponse(errorMessage);&#10;&#9;&#9;&#9;} finally {&#10;&#9;&#9;&#9;&#9;setIsLoading(false);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#9;&#9;return (&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;container mx-auto p-4 max-w-5xl bg-gray-50 min-h-screen&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;h1 className=&quot;text-center text-3xl font-bold text-indigo-700 my-6&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;HTTP 代理工具&#10;&#9;&#9;&#9;&#9;&#9;&lt;/h1&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;mb-8 p-6 bg-white shadow-xl rounded-lg&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;examples&quot; className=&quot;block text-md font-semibold text-gray-800 mb-2&quot;&gt;加载预设示例:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;select&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;id=&quot;examples&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={(e)=&gt;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;const selectedExample = exampleRequests.find(ex=&gt;ex.name===e.target.value);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (selectedExample){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;loadExample(selectedExample);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-1 block w-full pl-3 pr-10 py-2.5 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md shadow-sm&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;&quot;&gt;选择一个示例...&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{exampleRequests.map(ex=&gt;&lt;option key={ex.name} value={ex.name}&gt;{ex.name}&lt;/option&gt;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/select&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;space-y-8 bg-white p-6 shadow-xl rounded-lg&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* 新增：代理和手动重定向选项 */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;mb-4 flex space-x-6&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;useProxy&quot; className=&quot;inline-flex items-center&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;checkbox&quot; id=&quot;useProxy&quot; checked={!useProxy}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e =&gt; setUseProxy(!e.target.checked)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;form-checkbox h-5 w-5 text-indigo-600&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;ml-2 text-gray-700&quot;&gt;不使用代理&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;manualRedirect&quot; className=&quot;inline-flex items-center&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;checkbox&quot; id=&quot;manualRedirect&quot; checked={manualRedirect}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;setManualRedirect(e.target.checked)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;form-checkbox h-5 w-5 text-indigo-600&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;ml-2 text-gray-700&quot;&gt;手动处理重定向&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* Method and URL */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-6 items-end&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;md:col-span-1&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;method&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;请求方式:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;select id=&quot;method&quot; value={method} onChange={e=&gt;setMethod(e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md shadow-sm&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;GET&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;POST&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;PUT&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;PATCH&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;DELETE&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;OPTIONS&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;HEAD&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/select&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;md:col-span-3&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;url&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;目标 URL:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; id=&quot;url&quot; value={url} onChange={e=&gt;setUrl(e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; placeholder=&quot;例如: https://api.example.com/data&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* Headers */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;h3 className=&quot;text-xl font-semibold text-gray-800 mb-3&quot;&gt;请求 Headers&lt;/h3&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;space-y-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{headers.map((header, index)=&gt;(&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div key={header.id} className=&quot;flex items-center space-x-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Header Name&quot; value={header.name}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateHeader(header.id, 'name', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;flex-grow shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Header Value&quot; value={header.value}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateHeader(header.id, 'value', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;flex-grow shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={()=&gt;removeHeader(header.id)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;p-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm font-medium transition-colors&quot;&gt;删除&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={addHeader}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-3 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 text-sm font-medium transition-colors&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;添加 Header&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* Body */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;h3 className=&quot;text-xl font-semibold text-gray-800 mb-3&quot;&gt;请求 Body&lt;/h3&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;flex space-x-1 mb-4 border-b border-gray-200&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{['none', 'json', 'form', 'multipart', 'binary'].map(type=&gt;(&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button key={type} onClick={()=&gt;setBodyType(type)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className={`px-4 py-2 text-sm font-medium rounded-t-md focus:outline-none&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;${bodyType===type&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;? 'bg-indigo-600 text-white'&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;: 'text-gray-600 hover:bg-indigo-100 hover:text-indigo-700'}`}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{type.charAt(0).toUpperCase()+type.slice(1)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='none' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm text-gray-500 italic p-2&quot;&gt;此请求类型通常不发送请求体。&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='json' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;textarea value={jsonBody} onChange={e=&gt;setJsonBody(e.target.value)} rows=&quot;8&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2 font-mono focus:ring-indigo-500 focus:border-indigo-500&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;placeholder='例如: {&quot;key&quot;: &quot;value&quot;, &quot;items&quot;: [1,2,3]}'&gt;&lt;/textarea&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='form' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;space-y-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{formBody.map(param=&gt;(&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div key={param.id} className=&quot;flex items-center space-x-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Name&quot; value={param.name}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateFormParam(param.id, 'name', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;flex-grow shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Value&quot; value={param.value}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateFormParam(param.id, 'value', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;flex-grow shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={()=&gt;removeFormParam(param.id)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;p-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm font-medium transition-colors&quot;&gt;删除&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={addFormParam}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-1 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 text-sm font-medium transition-colors&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;添加 Form 参数&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='multipart' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;space-y-3&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{multipartBody.map(param=&gt;(&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div key={param.id} className=&quot;p-3 border border-gray-200 rounded-md space-y-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Name&quot; value={param.name}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateMultipartParam(param.id, 'name', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;w-1/3 shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;select value={param.type}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={(e)=&gt;handleMultipartFileTypeChange(param.id, e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;p-2 border-gray-300 rounded-md text-sm shadow-sm focus:ring-indigo-500 focus:border-indigo-500&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;text&quot;&gt;Text&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;file&quot;&gt;File&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/select&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={()=&gt;removeMultipartParam(param.id)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;ml-auto p-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm font-medium transition-colors&quot;&gt;删除&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{param.type==='text'? (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Value&quot; value={param.value}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateMultipartParam(param.id, 'value', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;): (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; &lt;input type=&quot;file&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={e=&gt;handleMultipartFileChange(param.id, e.target.files[0])}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 cursor-pointer&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; )}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={addMultipartParam}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-1 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 text-sm font-medium transition-colors&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;添加 Multipart 参数&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='binary' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;file&quot; onChange={e=&gt;setBinaryFile(e.target.files[0])}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 cursor-pointer&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* Send Button */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;flex items-center space-x-4 mt-8&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={handleSendRequest} disabled={isLoading}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;flex-grow px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 disabled:bg-gray-400 transition-colors text-sm&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{isLoading? '发送中...': '发送请求'}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;relative&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={() =&gt; handleCopyAsFetch(false)} disabled={isLoading}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={handleSendRequest} disabled={isLoading}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full mt-8 px-6 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 disabled:bg-gray-400 transition-colors text-lg&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{isLoading? '发送中...': '发送请求'}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{response}&#10;&#9;&#9;&#9;&#9;&#9;&lt;/pre&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;footer class=&quot;text-center text-gray-500 text-sm mt-12 pb-8&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;HTTP Proxy 工具&#10;&#9;&#9;&#9;&#9;&#9;&lt;/footer&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;);&#10;&#9;}&#10;&#10;&#9;createRoot(document.getElementById('root')).render(&lt;App/&gt;);&#10;&lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;zh-CN&quot;&gt;&#10;&lt;head&gt;&#10;&lt;meta charset=&quot;UTF-8&quot;/&gt;&#10;&lt;title&gt;HTTP Proxy 工具&lt;/title&gt;&#10;&lt;meta content=&quot;width=device-width, initial-scale=1.0&quot; name=&quot;viewport&quot;/&gt;&#10;&lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;https://unpkg.com/@babel/standalone&quot;&gt;&lt;/script&gt;&#10;&lt;!-- 必须导入React和ReactDOM --&gt;&#10;&lt;script data-type=&quot;module&quot; type=&quot;text/babel&quot;&gt;&#10;&#9;import {createRoot} from 'https://esm.sh/react-dom@19/client';&#10;&#9;import React, {useCallback, useEffect, useState} from 'https://esm.sh/react@19';&#10;&#10;&#9;function App(){&#10;&#9;&#9;const [method, setMethod] = useState('GET');&#10;&#9;&#9;const [url, setUrl] = useState('https://httpbin.org/get');&#10;&#9;&#9;const [headers, setHeaders] = useState([]);&#10;&#9;&#9;const [bodyType, setBodyType] = useState('none');&#10;&#9;&#9;const [jsonBody, setJsonBody] = useState('');&#10;&#9;&#9;const [formBody, setFormBody] = useState([]);&#10;&#9;&#9;const [multipartBody, setMultipartBody] = useState([]);&#10;&#9;&#9;const [binaryFile, setBinaryFile] = useState(null);&#10;&#9;&#9;const [response, setResponse] = useState('');&#10;&#9;&#9;const [isLoading, setIsLoading] = useState(false);&#10;&#9;&#9;const [manualRedirect, setManualRedirect] = useState(false);&#10;&#9;&#9;const [useProxy, setUseProxy] = useState(true); // 默认为 true，使用代理&#10;&#9;&#9;const [copyStatus, setCopyStatus] = useState('');&#10;&#10;&#9;&#9;const exampleRequests = [&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'GET 示例 (httpbin.org/get)',&#10;&#9;&#9;&#9;&#9;method:'GET',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/get',&#10;&#9;&#9;&#9;&#9;headers:[{name:'Accept', value:'application/json'}],&#10;&#9;&#9;&#9;&#9;bodyType:'none', jsonBody:'', formBody:[], multipartBody:[], binaryFile:null,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'JSON POST 示例 (httpbin.org/post)',&#10;&#9;&#9;&#9;&#9;method:'POST',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/post',&#10;&#9;&#9;&#9;&#9;headers:[{name:'X-Custom-Header', value:'ReactProxyTest'}], // Content-Type will be auto-added&#10;&#9;&#9;&#9;&#9;bodyType:'json',&#10;&#9;&#9;&#9;&#9;jsonBody:JSON.stringify({query:'React Proxy', items:[{id:1, name:'item1'}, {id:2, name:'item2'}]}, null, 2),&#10;&#9;&#9;&#9;&#9;formBody:[], multipartBody:[], binaryFile:null,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'Form POST 示例 (httpbin.org/post)',&#10;&#9;&#9;&#9;&#9;method:'POST',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/post',&#10;&#9;&#9;&#9;&#9;headers:[], // Content-Type will be auto-added&#10;&#9;&#9;&#9;&#9;bodyType:'form',&#10;&#9;&#9;&#9;&#9;formBody:[{name:'username', value:'testUser'}, {name:'action', value:'submit'}],&#10;&#9;&#9;&#9;&#9;jsonBody:'', multipartBody:[], binaryFile:null,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'Multipart POST 示例 (httpbin.org/post)',&#10;&#9;&#9;&#9;&#9;method:'POST',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/post',&#10;&#9;&#9;&#9;&#9;headers:[], // Content-Type will be set by browser for FormData&#10;&#9;&#9;&#9;&#9;bodyType:'multipart',&#10;&#9;&#9;&#9;&#9;multipartBody:[&#10;&#9;&#9;&#9;&#9;&#9;{name:'textParam', value:'Hello Multipart', type:'text', file:null},&#10;&#9;&#9;&#9;&#9;&#9;{name:'fileParam', value:'', type:'file', file:null /* User will select a file */},&#10;&#9;&#9;&#9;&#9;],&#10;&#9;&#9;&#9;&#9;jsonBody:'', formBody:[], binaryFile:null,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'Binary File POST 示例 (httpbin.org/post)',&#10;&#9;&#9;&#9;&#9;method:'POST',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/post',&#10;&#9;&#9;&#9;&#9;headers:[], // Content-Type will be auto-detected from file or set to octet-stream&#10;&#9;&#9;&#9;&#9;bodyType:'binary',&#10;&#9;&#9;&#9;&#9;binaryFile:null, /* User will select a file */&#10;&#9;&#9;&#9;&#9;jsonBody:'', formBody:[], multipartBody:[],&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;name:'手动重定向 GET 示例 (httpbin.org/redirect-to)',&#10;&#9;&#9;&#9;&#9;method:'GET',&#10;&#9;&#9;&#9;&#9;url:'https://httpbin.org/redirect-to?url=https://example.com',&#10;&#9;&#9;&#9;&#9;headers:[],&#10;&#9;&#9;&#9;&#9;bodyType:'none',&#10;&#9;&#9;&#9;&#9;jsonBody:'', formBody:[], multipartBody:[], binaryFile:null,&#10;&#9;&#9;&#9;&#9;manualRedirect:true, // 新增&#10;&#9;&#9;&#9;},&#10;&#9;&#9;];&#10;&#10;&#9;&#9;// 生成唯一 ID&#10;&#9;&#9;function genId(){&#10;&#9;&#9;&#9;return Date.now()+Math.random()*1000;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 加载示例请求配置&#10;&#9;&#9;const loadExample = useCallback((example)=&gt;{&#10;&#9;&#9;&#9;const {&#10;&#9;&#9;&#9;&#9;method = 'GET', url = '', headers = [], bodyType = 'none',&#10;&#9;&#9;&#9;&#9;jsonBody = '', formBody = [], multipartBody = [], manualRedirect = false,&#10;&#9;&#9;&#9;} = example;&#10;&#9;&#9;&#9;setMethod(method);&#10;&#9;&#9;&#9;setUrl(url);&#10;&#9;&#9;&#9;setHeaders(headers.map(h=&gt;({...h, id:genId()})));&#10;&#9;&#9;&#9;setBodyType(bodyType);&#10;&#9;&#9;&#9;setJsonBody(jsonBody);&#10;&#9;&#9;&#9;setFormBody(formBody.map(f=&gt;({...f, id:genId()})));&#10;&#9;&#9;&#9;setMultipartBody(multipartBody.map(m=&gt;({...m, id:genId(), file:null})));&#10;&#9;&#9;&#9;setBinaryFile(null);&#10;&#9;&#9;&#9;setManualRedirect(manualRedirect);&#10;&#9;&#9;&#9;setResponse('示例已加载。配置完成后，请点击“发送请求”。');&#10;&#9;&#9;}, []);&#10;&#10;&#9;&#9;// 启动时，加载第一个示例&#10;&#9;&#9;useEffect(()=&gt;{&#10;&#9;&#9;&#9;const defaultExample = exampleRequests[0];&#10;&#9;&#9;&#9;if (defaultExample){&#10;&#9;&#9;&#9;&#9;loadExample(defaultExample);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}, []);&#10;&#10;&#9;&#9;const addHeader = ()=&gt;setHeaders([...headers, {id:genId(), name:'', value:''}]);&#10;&#9;&#9;const removeHeader = (id)=&gt;setHeaders(headers.filter(h=&gt;h.id!==id));&#10;&#9;&#9;const updateHeader = (id, field, value)=&gt;{&#10;&#9;&#9;&#9;setHeaders(headers.map(h=&gt;h.id===id? {...h, [field]:value}: h));&#10;&#9;&#9;};&#10;&#10;&#9;&#9;const addFormParam = ()=&gt;setFormBody([...formBody, {id:genId(), name:'', value:''}]);&#10;&#9;&#9;const removeFormParam = (id)=&gt;setFormBody(formBody.filter(p=&gt;p.id!==id));&#10;&#9;&#9;const updateFormParam = (id, field, value)=&gt;{&#10;&#9;&#9;&#9;setFormBody(formBody.map(p=&gt;p.id===id? {...p, [field]:value}: p));&#10;&#9;&#9;};&#10;&#10;&#9;&#9;const addMultipartParam = ()=&gt;setMultipartBody(&#10;&#9;&#9;&#9;&#9;[...multipartBody, {id:genId(), name:'', value:'', type:'text', file:null}]);&#10;&#9;&#9;const removeMultipartParam = (id)=&gt;setMultipartBody(multipartBody.filter(p=&gt;p.id!==id));&#10;&#9;&#9;const updateMultipartParam = (id, field, value)=&gt;{&#10;&#9;&#9;&#9;setMultipartBody(multipartBody.map(p=&gt;p.id===id? {...p, [field]:value}: p));&#10;&#9;&#9;};&#10;&#9;&#9;const handleMultipartFileTypeChange = (id, type)=&gt;{&#10;&#9;&#9;&#9;setMultipartBody(multipartBody.map(p=&gt;p.id===id? {&#10;&#9;&#9;&#9;&#9;...p, type:type, value:type==='file'? (p.file? p.file.name: ''): p.value, file:type==='text'? null: p.file,&#10;&#9;&#9;&#9;}: p));&#10;&#9;&#9;};&#10;&#9;&#9;const handleMultipartFileChange = (id, file)=&gt;{&#10;&#9;&#9;&#9;setMultipartBody(multipartBody.map(p=&gt;p.id===id? {...p, file:file, value:file? file.name: ''}: p));&#10;&#9;&#9;};&#10;&#10;&#9;&#9;const handleCopyAsFetch = async (useProxyForCopy) =&gt; {&#10;&#9;&#9;&#9;// 1. 准备 Headers&#10;&#9;&#9;&#9;const requestHeaders = new Headers();&#10;&#9;&#9;&#9;let hasUserContentType = false;&#10;&#9;&#9;&#9;headers.forEach(h =&gt; {&#10;&#9;&#9;&#9;&#9;if (h.name &amp;&amp; h.value) {&#10;&#9;&#9;&#9;&#9;&#9;requestHeaders.set(h.name, h.value);&#10;&#9;&#9;&#9;&#9;&#9;if (h.name.toLowerCase() === 'content-type') {&#10;&#9;&#9;&#9;&#9;&#9;&#9;hasUserContentType = true;&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;});&#10;&#10;&#9;&#9;&#9;// 2. 准备 Body 和 Content-Type&#10;&#9;&#9;&#9;let bodyToSend = null;&#10;&#9;&#9;&#9;let autoContentType = null;&#10;&#9;&#9;&#9;let bodySetupCode = '';&#10;&#9;&#9;&#9;let bodyInlinedCode = 'null'; // The code to be inlined in fetch options&#10;&#10;&#9;&#9;&#9;if (method !== 'GET' &amp;&amp; method !== 'HEAD') {&#10;&#9;&#9;&#9;&#9;switch (bodyType) {&#10;&#9;&#9;&#9;&#9;&#9;case 'json':&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = jsonBody;&#10;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = 'application/json; charset=utf-8';&#10;&#9;&#9;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;const parsedJson = JSON.parse(jsonBody);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;bodyInlinedCode = `JSON.stringify(${JSON.stringify(parsedJson, null, 2)})`;&#10;&#9;&#9;&#9;&#9;&#9;&#9;} catch (e) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;bodyInlinedCode = `\`${jsonBody.replace(/`/g, '\\`')}\``; // Warning: Invalid JSON&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'form':&#10;&#9;&#9;&#9;&#9;&#9;&#9;const params = new URLSearchParams();&#10;&#9;&#9;&#9;&#9;&#9;&#9;formBody.forEach(p =&gt; { if (p.name) { params.append(p.name, p.value); } });&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = params;&#10;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = 'application/x-www-form-urlencoded; charset=utf-8';&#10;&#9;&#9;&#9;&#9;&#9;&#9;const paramsObject = formBody.filter(p =&gt; p.name).reduce((acc, p) =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;acc[p.name] = p.value;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;return acc;&#10;&#9;&#9;&#9;&#9;&#9;&#9;}, {});&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyInlinedCode = `new URLSearchParams(${JSON.stringify(paramsObject, null, 2)})`;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'multipart':&#10;&#9;&#9;&#9;&#9;&#9;&#9;const formData = new FormData();&#10;&#9;&#9;&#9;&#9;&#9;&#9;multipartBody.forEach((p, index) =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (p.name) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (p.type === 'file') {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;const paramName = p.name.replace(/'/g, &quot;\\'&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;const fileName = p.file?.name.replace(/'/g, &quot;\\'&quot;) || 'filename.txt';&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;const fileType = p.file?.type.replace(/'/g, &quot;\\'&quot;) || 'text/plain';&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;bodySetupCode += `// TODO: You need to provide the actual file content for '${paramName}'.\n`;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;bodySetupCode += `formData.append('${paramName}', new File(['file content'], '${fileName}', {type: '${fileType}'}));\n`;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;bodySetupCode += `formData.append('${p.name.replace(/'/g, &quot;\\'&quot;)}', '${p.value.replace(/'/g, &quot;\\'&quot;)}');\n`;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyInlinedCode = 'formData';&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'binary':&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = binaryFile;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (binaryFile) { autoContentType = binaryFile.type || 'application/octet-stream'; }&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodySetupCode = `// TODO: You need to provide the file blob or buffer for the body.\n`;&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodySetupCode += `const bodyBlob = new Blob(['file content'], {type: '${binaryFile?.type || 'application/octet-stream'}'});\n`;&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyInlinedCode = 'bodyBlob'; // Placeholder&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if (autoContentType &amp;&amp; !hasUserContentType) {&#10;&#9;&#9;&#9;&#9;requestHeaders.set('Content-Type', autoContentType);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;if (bodyToSend instanceof FormData &amp;&amp; hasUserContentType) {&#10;&#9;&#9;&#9;&#9;requestHeaders.delete('Content-Type');&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 3. 构建 fetch 代码&#10;&#9;&#9;&#9;let fetchUrl;&#10;&#9;&#9;&#9;let fetchOptions;&#10;&#9;&#9;&#9;const headersObject = {};&#10;&#9;&#9;&#9;requestHeaders.forEach((value, key) =&gt; { headersObject[key] = value; });&#10;&#10;&#9;&#9;&#9;if (useProxyForCopy) {&#10;&#9;&#9;&#9;&#9;fetchUrl = `${window.location.origin}/api/proxy`;&#10;&#9;&#9;&#9;&#9;const proxyHeaders = { ...headersObject };&#10;&#9;&#9;&#9;&#9;proxyHeaders['X-Url'] = url;&#10;&#9;&#9;&#9;&#9;proxyHeaders['X-Method'] = method;&#10;&#9;&#9;&#9;&#9;if (manualRedirect) {&#10;&#9;&#9;&#9;&#9;&#9;proxyHeaders['X-Redirect'] = 'manual';&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;fetchOptions = {&#10;&#9;&#9;&#9;&#9;&#9;method: 'POST',&#10;&#9;&#9;&#9;&#9;&#9;headers: proxyHeaders,&#10;&#9;&#9;&#9;&#9;&#9;// 代理请求的重定向由代理服务器通过 X-Redirect 头处理，fetch 本身不需要 redirect 参数&#10;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;&#9;if (bodyToSend || bodyType === 'binary') {&#10;&#9;&#9;&#9;&#9;&#9;fetchOptions.body = `%%BODY_PLACEHOLDER%%`;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;fetchUrl = url;&#10;&#9;&#9;&#9;&#9;fetchOptions = {&#10;&#9;&#9;&#9;&#9;&#9;method: method,&#10;&#9;&#9;&#9;&#9;&#9;headers: headersObject,&#10;&#9;&#9;&#9;&#9;&#9;// 仅在需要手动重定向时才添加 redirect 参数，否则使用 fetch 默认值 'follow'&#10;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;&#9;if (manualRedirect) {&#10;&#9;&#9;&#9;&#9;&#9;fetchOptions.redirect = 'manual';&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;if (bodyToSend || bodyType === 'binary') {&#10;&#9;&#9;&#9;&#9;&#9;fetchOptions.body = `%%BODY_PLACEHOLDER%%`; // Special placeholder&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;let optionsString = JSON.stringify(fetchOptions, null, 2).replace(&#10;&#9;&#9;&#9;&#9;'&quot;%%BODY_PLACEHOLDER%%&quot;',&#10;&#9;&#9;&#9;&#9;bodyInlinedCode&#10;&#9;&#9;&#9;);&#10;&#10;&#9;&#9;&#9;const fetchCode = `${bodySetupCode ? bodySetupCode + '\n' : ''}fetch('${fetchUrl}', ${optionsString});`;&#10;&#10;&#9;&#9;&#9;// 4. 复制到剪贴板&#10;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;await navigator.clipboard.writeText(fetchCode);&#10;&#9;&#9;&#9;&#9;setCopyStatus('已复制!');&#10;&#9;&#9;&#9;&#9;setTimeout(() =&gt; setCopyStatus(''), 2000);&#10;&#9;&#9;&#9;} catch (err) {&#10;&#9;&#9;&#9;&#9;console.error('Failed to copy: ', err);&#10;&#9;&#9;&#9;&#9;setCopyStatus('复制失败!');&#10;&#9;&#9;&#9;&#9;setTimeout(() =&gt; setCopyStatus(''), 2000);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#10;&#9;&#9;const handleSendRequest = async()=&gt;{&#10;&#9;&#9;&#9;setIsLoading(true);&#10;&#9;&#9;&#9;setResponse('请求中...');&#10;&#10;&#9;&#9;&#9;if (!url){&#10;&#9;&#9;&#9;&#9;setResponse('错误: 目标 URL 不能为空。');&#10;&#9;&#9;&#9;&#9;setIsLoading(false);&#10;&#9;&#9;&#9;&#9;return;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 构造请求头和请求体，这部分对于代理和直接请求是共用的&#10;&#9;&#9;&#9;const requestHeaders = new Headers();&#10;&#9;&#9;&#9;let hasUserContentType = false;&#10;&#9;&#9;&#9;headers.forEach(h=&gt;{&#10;&#9;&#9;&#9;&#9;if (h.name &amp;&amp; h.value){&#10;&#9;&#9;&#9;&#9;&#9;requestHeaders.set(h.name, h.value);&#10;&#9;&#9;&#9;&#9;&#9;if (h.name.toLowerCase()==='content-type'){&#10;&#9;&#9;&#9;&#9;&#9;&#9;hasUserContentType = true;&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;});&#10;&#10;&#9;&#9;&#9;let bodyToSend = null;&#10;&#9;&#9;&#9;let autoContentType = null;&#10;&#10;&#9;&#9;&#9;if (method!=='GET' &amp;&amp; method!=='HEAD'){&#10;&#9;&#9;&#9;&#9;switch (bodyType){&#10;&#9;&#9;&#9;&#9;&#9;case 'json':&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = jsonBody;&#10;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = 'application/json; charset=utf-8';&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'form':&#10;&#9;&#9;&#9;&#9;&#9;&#9;const params = new URLSearchParams();&#10;&#9;&#9;&#9;&#9;&#9;&#9;formBody.forEach(p=&gt;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (p.name){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;params.append(p.name, p.value);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = params;&#10;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = 'application/x-www-form-urlencoded; charset=utf-8';&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'multipart':&#10;&#9;&#9;&#9;&#9;&#9;&#9;const formData = new FormData();&#10;&#9;&#9;&#9;&#9;&#9;&#9;multipartBody.forEach(p=&gt;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (p.name){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (p.type==='file' &amp;&amp; p.file){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;formData.append(p.name, p.file, p.file.name);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;} else if (p.type==='text'){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;formData.append(p.name, p.value);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = formData;&#10;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = null; // 对于 FormData，浏览器会自动设置 Content-Type&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;case 'binary':&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = binaryFile;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (binaryFile){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;autoContentType = binaryFile.type || 'application/octet-stream';&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;&#9;default:&#10;&#9;&#9;&#9;&#9;&#9;&#9;bodyToSend = null;&#10;&#9;&#9;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;if (autoContentType &amp;&amp; !hasUserContentType){&#10;&#9;&#9;&#9;&#9;requestHeaders.set('Content-Type', autoContentType);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;// 如果是 FormData，浏览器需要自己设置 Content-Type 和 boundary，因此删除用户设置的&#10;&#9;&#9;&#9;if (bodyToSend instanceof FormData &amp;&amp; hasUserContentType){&#10;&#9;&#9;&#9;&#9;const userContentTypeHeader = headers.find(h=&gt;h.name.toLowerCase()==='content-type');&#10;&#9;&#9;&#9;&#9;if (userContentTypeHeader){&#10;&#9;&#9;&#9;&#9;&#9;requestHeaders.delete(userContentTypeHeader.name);&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;let fetchUrl;&#10;&#9;&#9;&#9;&#9;let fetchOptions;&#10;&#10;&#9;&#9;&#9;&#9;if (useProxy){&#10;&#9;&#9;&#9;&#9;&#9;// 使用代理服务器的逻辑&#10;&#9;&#9;&#9;&#9;&#9;const proxyHeaders = new Headers();&#10;&#9;&#9;&#9;&#9;&#9;proxyHeaders.set('X-Url', url);&#10;&#9;&#9;&#9;&#9;&#9;proxyHeaders.set('X-Method', method);&#10;&#9;&#9;&#9;&#9;&#9;if (manualRedirect){&#10;&#9;&#9;&#9;&#9;&#9;&#9;proxyHeaders.set('X-Redirect', 'manual');&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;// 将用户定义的所有header传递给代理&#10;&#9;&#9;&#9;&#9;&#9;requestHeaders.forEach((value, key) =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;&#9;proxyHeaders.set(key, value);&#10;&#9;&#9;&#9;&#9;&#9;});&#10;&#10;&#9;&#9;&#9;&#9;&#9;fetchUrl = '/api/proxy';&#10;&#9;&#9;&#9;&#9;&#9;fetchOptions = {&#10;&#9;&#9;&#9;&#9;&#9;&#9;method: 'POST', // 对代理的请求总是POST&#10;&#9;&#9;&#9;&#9;&#9;&#9;headers: proxyHeaders,&#10;&#9;&#9;&#9;&#9;&#9;&#9;body: bodyToSend,&#10;&#9;&#9;&#9;&#9;&#9;&#9;redirect: 'manual', // 由代理处理重定向&#10;&#9;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;// 直接请求的逻辑&#10;&#9;&#9;&#9;&#9;&#9;fetchUrl = url;&#10;&#9;&#9;&#9;&#9;&#9;fetchOptions = {&#10;&#9;&#9;&#9;&#9;&#9;&#9;method: method,&#10;&#9;&#9;&#9;&#9;&#9;&#9;headers: requestHeaders,&#10;&#9;&#9;&#9;&#9;&#9;&#9;body: bodyToSend,&#10;&#9;&#9;&#9;&#9;&#9;&#9;redirect: manualRedirect ? 'manual' : 'follow',&#10;&#9;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;const res = await fetch(fetchUrl, fetchOptions);&#10;&#10;&#9;&#9;&#9;&#9;console.log('Response:', res);&#10;&#10;&#9;&#9;&#9;&#9;const responseHeaders = {};&#10;&#9;&#9;&#9;&#9;res.headers.forEach((value, key)=&gt;{&#10;&#9;&#9;&#9;&#9;&#9;responseHeaders[key] = value;&#10;&#9;&#9;&#9;&#9;});&#10;&#10;&#9;&#9;&#9;&#9;let responseBodyContent;&#10;&#9;&#9;&#9;&#9;const respContentType = res.headers.get('content-type');&#10;&#9;&#9;&#9;&#9;if (respContentType?.includes('application/json')){&#10;&#9;&#9;&#9;&#9;&#9;responseBodyContent = await res.json();&#10;&#9;&#9;&#9;&#9;} else if (respContentType?.includes('text/') || respContentType?.includes('application/xml')&#10;&#9;&#9;&#9;&#9;&#9;&#9;|| respContentType?.includes('application/javascript')){&#10;&#9;&#9;&#9;&#9;&#9;responseBodyContent = await res.text();&#10;&#9;&#9;&#9;&#9;} else if (res.body){&#10;&#9;&#9;&#9;&#9;&#9;try {&#10;&#9;&#9;&#9;&#9;&#9;&#9;const blob = await res.blob();&#10;&#9;&#9;&#9;&#9;&#9;&#9;responseBodyContent = `[Binary data: ${blob.size} bytes, Type: ${blob.type&#10;&#9;&#9;&#9;&#9;&#9;&#9;|| 'unknown'}. Cannot display content directly.]`;&#10;&#9;&#9;&#9;&#9;&#9;} catch (e){&#10;&#9;&#9;&#9;&#9;&#9;&#9;responseBodyContent = '[Response body exists but could not be read or displayed]';&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;} else {&#10;&#9;&#9;&#9;&#9;&#9;responseBodyContent = '[No response body]';&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;&#9;const result = {&#10;&#9;&#9;&#9;&#9;&#9;status:res.status,&#10;&#9;&#9;&#9;&#9;&#9;statusText:res.statusText,&#10;&#9;&#9;&#9;&#9;&#9;headers:responseHeaders,&#10;&#9;&#9;&#9;&#9;&#9;body:responseBodyContent,&#10;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;&#9;setResponse(JSON.stringify(result, null, 2));&#10;&#10;&#9;&#9;&#9;} catch (err){&#10;&#9;&#9;&#9;&#9;console.error('Request failed:', err);&#10;&#9;&#9;&#9;&#9;let errorMessage = '请求失败:\n' + (err.message || String(err));&#10;&#9;&#9;&#9;&#9;if (!useProxy &amp;&amp; err.name === 'TypeError' &amp;&amp; err.message.includes('Failed to fetch')) {&#10;&#9;&#9;&#9;&#9;&#9;errorMessage += '\n\n提示：当不使用代理直接请求时，可能会遇到 CORS (跨域资源共享) 策略问题。请确保目标服务器允许来自此页面的跨域请求。';&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;setResponse(errorMessage);&#10;&#9;&#9;&#9;} finally {&#10;&#9;&#9;&#9;&#9;setIsLoading(false);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#9;&#9;return (&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;container mx-auto p-4 max-w-5xl bg-gray-50 min-h-screen&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;h1 className=&quot;text-center text-3xl font-bold text-indigo-700 my-6&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;HTTP 代理工具&#10;&#9;&#9;&#9;&#9;&#9;&lt;/h1&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;mb-8 p-6 bg-white shadow-xl rounded-lg&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;examples&quot; className=&quot;block text-md font-semibold text-gray-800 mb-2&quot;&gt;加载预设示例:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;select&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;id=&quot;examples&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={(e)=&gt;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;const selectedExample = exampleRequests.find(ex=&gt;ex.name===e.target.value);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (selectedExample){&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;loadExample(selectedExample);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-1 block w-full pl-3 pr-10 py-2.5 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md shadow-sm&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;&quot;&gt;选择一个示例...&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{exampleRequests.map(ex=&gt;&lt;option key={ex.name} value={ex.name}&gt;{ex.name}&lt;/option&gt;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/select&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;space-y-8 bg-white p-6 shadow-xl rounded-lg&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* 新增：代理和手动重定向选项 */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;mb-4 flex space-x-6&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;useProxy&quot; className=&quot;inline-flex items-center&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;checkbox&quot; id=&quot;useProxy&quot; checked={!useProxy}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e =&gt; setUseProxy(!e.target.checked)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;form-checkbox h-5 w-5 text-indigo-600&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;ml-2 text-gray-700&quot;&gt;不使用代理&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;manualRedirect&quot; className=&quot;inline-flex items-center&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;checkbox&quot; id=&quot;manualRedirect&quot; checked={manualRedirect}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;setManualRedirect(e.target.checked)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;form-checkbox h-5 w-5 text-indigo-600&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;ml-2 text-gray-700&quot;&gt;手动处理重定向&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* Method and URL */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-6 items-end&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;md:col-span-1&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;method&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;请求方式:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;select id=&quot;method&quot; value={method} onChange={e=&gt;setMethod(e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md shadow-sm&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;GET&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;POST&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;PUT&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;PATCH&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;DELETE&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;OPTIONS&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option&gt;HEAD&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/select&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;md:col-span-3&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;url&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;目标 URL:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; id=&quot;url&quot; value={url} onChange={e=&gt;setUrl(e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; placeholder=&quot;例如: https://api.example.com/data&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* Headers */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;h3 className=&quot;text-xl font-semibold text-gray-800 mb-3&quot;&gt;请求 Headers&lt;/h3&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;space-y-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{headers.map((header, index)=&gt;(&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div key={header.id} className=&quot;flex items-center space-x-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Header Name&quot; value={header.name}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateHeader(header.id, 'name', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;flex-grow shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Header Value&quot; value={header.value}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateHeader(header.id, 'value', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;flex-grow shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={()=&gt;removeHeader(header.id)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;p-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm font-medium transition-colors&quot;&gt;删除&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={addHeader}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-3 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm font-medium transition-colors&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;添加 Header&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* Body */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;h3 className=&quot;text-xl font-semibold text-gray-800 mb-3&quot;&gt;请求 Body&lt;/h3&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;flex space-x-1 mb-4 border-b border-gray-200&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{['none', 'json', 'form', 'multipart', 'binary'].map(type=&gt;(&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button key={type} onClick={()=&gt;setBodyType(type)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className={`px-4 py-2 text-sm font-medium rounded-t-md focus:outline-none&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;${bodyType===type&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;? 'bg-teal-600 text-white'&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;: 'text-gray-600 hover:bg-teal-100 hover:text-teal-700'}`}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{type.charAt(0).toUpperCase()+type.slice(1)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='none' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-sm text-gray-500 italic p-2&quot;&gt;此请求类型通常不发送请求体。&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='json' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;textarea value={jsonBody} onChange={e=&gt;setJsonBody(e.target.value)} rows=&quot;8&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2 font-mono focus:ring-indigo-500 focus:border-indigo-500&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;placeholder='例如: {&quot;key&quot;: &quot;value&quot;, &quot;items&quot;: [1,2,3]}'&gt;&lt;/textarea&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='form' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;space-y-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{formBody.map(param=&gt;(&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div key={param.id} className=&quot;flex items-center space-x-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Name&quot; value={param.name}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateFormParam(param.id, 'name', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;flex-grow shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Value&quot; value={param.value}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateFormParam(param.id, 'value', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;flex-grow shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={()=&gt;removeFormParam(param.id)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;p-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm font-medium transition-colors&quot;&gt;删除&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={addFormParam}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-1 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm font-medium transition-colors&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;添加 Form 参数&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='multipart' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;space-y-3&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{multipartBody.map(param=&gt;(&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div key={param.id} className=&quot;p-3 border border-gray-200 rounded-md space-y-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Name&quot; value={param.name}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateMultipartParam(param.id, 'name', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;w-1/3 shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;select value={param.type}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={(e)=&gt;handleMultipartFileTypeChange(param.id, e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;p-2 border-gray-300 rounded-md text-sm shadow-sm focus:ring-indigo-500 focus:border-indigo-500&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;text&quot;&gt;Text&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;file&quot;&gt;File&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/select&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={()=&gt;removeMultipartParam(param.id)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;ml-auto p-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm font-medium transition-colors&quot;&gt;删除&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{param.type==='text'? (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;text&quot; placeholder=&quot;Value&quot; value={param.value}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; onChange={e=&gt;updateMultipartParam(param.id, 'value', e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2 focus:ring-indigo-500 focus:border-indigo-500&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;): (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; &lt;input type=&quot;file&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={e=&gt;handleMultipartFileChange(param.id, e.target.files[0])}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 cursor-pointer&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; )}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={addMultipartParam}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;mt-1 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm font-medium transition-colors&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;添加 Multipart 参数&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{bodyType==='binary' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;input type=&quot;file&quot; onChange={e=&gt;setBinaryFile(e.target.files[0])}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; className=&quot;block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 cursor-pointer&quot;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{/* Send Button */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;flex items-center space-x-4 mt-8&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={handleSendRequest} disabled={isLoading}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;flex-grow px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 disabled:bg-gray-400 transition-colors text-sm&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{isLoading? '发送中...': '发送请求'}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;relative&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={() =&gt; handleCopyAsFetch(false)} disabled={isLoading}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;px-4 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:bg-gray-400 transition-colors text-sm&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;复制为 fetch (直连)&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{copyStatus &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;absolute -top-8 left-1/2 -translate-x-1/2 whitespace-nowrap bg-gray-800 text-white text-xs rounded py-1 px-2&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{copyStatus}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button onClick={() =&gt; handleCopyAsFetch(true)} disabled={isLoading}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;px-4 py-2 bg-teal-600 text-white font-semibold rounded-md hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-opacity-50 disabled:bg-gray-400 transition-colors text-sm&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;复制为 fetch (代理)&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;{/* Response */}&#10;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;mt-10&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;h2 className=&quot;text-2xl font-semibold text-gray-800 mb-4&quot;&gt;响应结果:&lt;/h2&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;pre&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;bg-gray-900 text-green-300 p-6 rounded-lg shadow-inner overflow-x-auto text-sm whitespace-pre-wrap break-all font-mono leading-relaxed&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;{response}&#10;&#9;&#9;&#9;&#9;&#9;&lt;/pre&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;footer class=&quot;text-center text-gray-500 text-sm mt-12 pb-8&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;HTTP Proxy 工具&#10;&#9;&#9;&#9;&#9;&#9;&lt;/footer&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;);&#10;&#9;}&#10;&#10;&#9;createRoot(document.getElementById('root')).render(&lt;App/&gt;);&#10;&lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>