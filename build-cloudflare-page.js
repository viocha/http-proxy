import fs from 'fs/promises';
import path from 'path';

const vercelDir = './api';
const cloudflareDir = './functions';
const cloudflareApiDir = './functions/api';

async function convertVercelToCloudflare() {
	try {
		// 确保 Cloudflare 的 functions 目录存在且为空
		await fs.rm(cloudflareDir, { recursive: true, force: true });
		await fs.mkdir(cloudflareApiDir, { recursive: true });
		
		// 读取 Vercel 的 api 目录
		const files = await fs.readdir(vercelDir);
		
		for (const file of files) {
			const sourcePath = path.join(vercelDir, file);
			const stats = await fs.stat(sourcePath);
			
			// 我们只处理文件，忽略子目录（可以根据需要扩展）
			if (stats.isFile()) {
				const fileContent = await fs.readFile(sourcePath, 'utf-8');
				
				// 这是一个简单的检查，判断是否是 Vercel Edge Function
				// 你可以根据需要让这个判断更智能
				if (fileContent.includes('export default async function')
						||fileContent.includes('export default function')
						|| fileContent.includes('runtime: \'edge\'')) {
					console.log(`Converting ${file} to Cloudflare format...`);
					
					// 生成 Cloudflare Pages Function 的包装代码
					const cloudflareWrapper = `
// This file is auto-generated by build-cloudflare.js
// Do not edit this file directly.

import vercelHandler from '../../api/${file}';

export const onRequest = async (context:any) => {
  // Vercel 的 handler 只接收 request，而 Cloudflare 的 context 包含更多信息
  // 我们只传递 request 对象给它
  return vercelHandler(context.request);
};
`;
					
					// 写入到 Cloudflare 的 functions 目录
					const destinationPath = path.join(cloudflareApiDir, file);
					await fs.writeFile(destinationPath, cloudflareWrapper.trim());
					console.log(`Successfully created ${destinationPath}`);
				}
			}
		}
		console.log('Conversion complete.');
	} catch (error) {
		// 如果 api 目录不存在，就优雅地退出，不报错
		if (error.code === 'ENOENT' && error.path === vercelDir) {
			console.log('Vercel "api" directory not found, skipping conversion.');
			return;
		}
		console.error('Error during conversion:', error);
		process.exit(1); // 构建失败
	}
}

convertVercelToCloudflare();
