// generate-worker.mjs
import fs from 'fs/promises';
import path from 'path';

const apiDir = './api';
const workerFilePath = './_worker.js'; // 在根目录生成

async function generateWorker() {
	try {
		const apiFiles = await fs.readdir(apiDir);
		const tsFiles = apiFiles.filter(file => file.endsWith('.ts'));
		
		let importStatements = '';
		let caseClauses = '';
		
		for (const file of tsFiles) {
			const routeName = path.basename(file, '.ts');
			const handlerName = `${routeName}Handler`;
			const routePath = `/api/${routeName}`;
			const importPath = `./api/${file.replace('.ts', '.js')}`;
			
			importStatements += `import ${handlerName} from '${importPath}';\n`;
			
			// *** 已修正 ***
			// 现在调用 handler 时，严格只传入 request 对象
			caseClauses += `
        case '${routePath}':
          return ${handlerName}(request);
      `;
		}
		
		const workerContent = `
// #################################################################
// #                                                               #
// #  THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. #
// #                                                               #
// #################################################################

// 自动导入的 API handlers
${importStatements}

export default {
  async fetch(request, env, ctx) {
    const pathname = new URL(request.url).pathname;

    // 优先匹配 API 路由
    switch (pathname) {
      ${caseClauses}
    }

    // 如果没有匹配到任何 API 路由，则将请求交给静态资源服务处理。
    return env.__STATIC_CONTENT.fetch(request);
  },
};
`;
		
		await fs.writeFile(workerFilePath, workerContent.trim());
		console.log(`✅ Successfully generated ${workerFilePath}`);
		
	} catch (err) {
		console.error('❌ Error generating _worker.js:', err);
	}
}

generateWorker();
