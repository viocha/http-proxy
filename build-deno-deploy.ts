// @ts-nocheck
import { join, fromFileUrl, dirname } from "https://deno.land/std@0.224.0/path/mod.ts";

const __dirname = dirname(fromFileUrl(import.meta.url));
const API_DIR = join(__dirname, 'api');
// 1. 修改输出文件名
const OUTPUT_FILE = join(__dirname, 'deno-deploy-entry.ts');

interface RouteInfo {
	path: string;
	modulePath: string;
	importName: string;
}

async function generateAdapter() {
	console.log("🔍 Scanning for functions in:", API_DIR);
	const routes: RouteInfo[] = [];

		for await (const entry of Deno.readDir(API_DIR)) {
		if (entry.isDirectory || !/\.(ts|js)$/.test(entry.name)) {
			console.log(`- Skipping ${entry.name}`);
			continue;
		}

		const fileName = entry.name;
		const routePath = `/api/${fileName.replace(/\.(ts|js)$/, '')}`;
		const modulePath = `./api/${fileName}`;
		const importName = `handler_${fileName.replace(/[^a-zA-Z0-9]/g, '_')}`;

		routes.push({
			path: routePath,
			modulePath,
			importName,
		});
		console.log(`✅ Found API route: ${routePath} -> ${modulePath}`);

		// 将文件中的 import .js 替换为 import .ts
		const filePath = join(API_DIR, fileName);
		let content = await Deno.readTextFile(filePath);
		const updatedContent = content.replace(/(import\s+.*?from\s+['"].*?)\.js(['"])/g, '$1.ts$2');
		if (content !== updatedContent) {
			await Deno.writeTextFile(filePath, updatedContent);
			console.log(`   🔄 Updated imports in ${fileName} from .js to .ts`);
		}
	}

	// --- 生成代码 ---
	const imports = routes.map(r =>
			`import ${r.importName} from '${r.modulePath}';`
	).join('\n');

	const apiCases = routes.map(r => `
        case '${r.path}':
            return ${r.importName}(req);`).join('');

	const fileContent = `
// @ts-nocheck
// -----------------------------------------------------------------------------
// ⚠️ THIS FILE IS AUTO-GENERATED BY build.ts. DO NOT EDIT MANUALLY.
// -----------------------------------------------------------------------------

import { serveDir } from "https://deno.land/std@0.224.0/http/file_server.ts";
${imports}

console.log("🚀 Deno Deploy server starting with generated routes...");

// --- Deno Deploy Server Entry ---
Deno.serve(async (req: Request) => {
    const url = new URL(req.url);
    const pathname = url.pathname;

    // --- Router ---
    switch (pathname) {
        // Dynamic API routes
        ${apiCases}

				// Static routes
        default:
            return serveDir(req, {
							fsRoot: "public", // 指定静态文件的根目录
							urlRoot: "", // URL 的根路径
						});
    }
});
`;

	await Deno.writeTextFile(OUTPUT_FILE, fileContent.trim());
	console.log(`\n🎉 Successfully generated adapter file: ${OUTPUT_FILE}`);
	console.log("You can now run 'deno run --allow-net --allow-read deno-deploy-entry.ts' to test it.");
}

generateAdapter();
