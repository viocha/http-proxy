// @ts-ignore
import { join, fromFileUrl, dirname } from "https://deno.land/std@0.224.0/path/mod.ts";

const __dirname = dirname(fromFileUrl(import.meta.url));
const API_DIR = join(__dirname, 'api');
// 1. 修改输出文件名
const OUTPUT_FILE = join(__dirname, 'deno-deploy-entry.ts');

interface RouteInfo {
	path: string;
	modulePath: string;
	importName: string;
}

async function generateAdapter() {
	console.log("🔍 Scanning for functions in:", API_DIR);
	const routes: RouteInfo[] = [];

	// @ts-ignore
	for await (const entry of Deno.readDir(API_DIR)) {
		if (entry.isDirectory || !/\.(ts|js)$/.test(entry.name)) {
			console.log(`- Skipping ${entry.name}`);
			continue;
		}

		const fileName = entry.name;
		const routePath = `/api/${fileName.replace(/\.(ts|js)$/, '')}`;
		const modulePath = `./api/${fileName}`;
		const importName = `handler_${fileName.replace(/[^a-zA-Z0-9]/g, '_')}`;

		routes.push({
			path: routePath,
			modulePath,
			importName,
		});
		console.log(`✅ Found API route: ${routePath} -> ${modulePath}`);
	}

	// --- 生成代码 ---
	const imports = routes.map(r =>
			`import ${r.importName} from '${r.modulePath}';`
	).join('\n');

	const apiCases = routes.map(r => `
        case '${r.path}':
            return ${r.importName}(req);`).join('');

	// 2. 添加处理根路由的静态代码块
	const rootRouteHandler = `
        case '/':
            try {
                // 从 public 目录提供静态 index.html
                const fileContent = await Deno.readFile('./public/index.html');
                return new Response(fileContent, {
                    headers: { 'Content-Type': 'text/html; charset=utf-8' },
                });
            } catch (error) {
                if (error instanceof Deno.errors.NotFound) {
                    return new Response("Not Found: index.html not found in public directory.", { status: 404 });
                }
                console.error("Error serving index.html:", error);
                return new Response("Internal Server Error", { status: 500 });
            }
    `;

	const fileContent = `
// -----------------------------------------------------------------------------
// ⚠️ THIS FILE IS AUTO-GENERATED BY build.ts. DO NOT EDIT MANUALLY.
// -----------------------------------------------------------------------------

// --- Import all Vercel handlers ---
${imports}

console.log("🚀 Deno Deploy server starting with generated routes...");

// --- Deno Deploy Server Entry ---
Deno.serve(async (req: Request) => {
    const url = new URL(req.url);
    const pathname = url.pathname;

    // --- Router ---
    switch (pathname) {
        // Static route for the root
        ${rootRouteHandler}

        // Dynamic API routes
        ${apiCases}

        default:
            return new Response("Not Found", { status: 404 });
    }
});
`;

	// @ts-ignore
	await Deno.writeTextFile(OUTPUT_FILE, fileContent.trim());
	console.log(`\n🎉 Successfully generated adapter file: ${OUTPUT_FILE}`);
	console.log("You can now run 'deno run --allow-net --allow-read deno-deploy-entry.ts' to test it.");
}

generateAdapter();
